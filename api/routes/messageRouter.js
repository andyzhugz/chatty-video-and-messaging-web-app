/* eslint-disable no-underscore-dangle */
const express = require('express');
const fs = require('fs');
const { ObjectId } = require('mongoose').Types;
const User = require('../model/user');
const Message = require('../model/message');
const Room = require('../model/room');
const { parser } = require('../app');
const { checkAuthenticated } = require('../app');
const { sendDatabaseErrorResponse } = require('../app');
const {
  checkAndSanitizeInput,
  handleInputCheck,
  checkFileSize,
  maxFileKb,
} = require('../app');

const router = express.Router();

// router.get('/getMessage',
//    checkAuthenticated,



// )

router.post('/sendMessage',//roomID from frontend, generated by MongoDB, 
//maintain the state which room we are in 
  //checkAuthenticated,
//   checkAndSanitizeInput(),
//   handleInputCheck,
  (req, res) => {
    //message_id, message_type, time stamp, text_message_content,from, to

    // send request from frontend (text_message_content, from, to, message_type)

    const roomID = req.body.roomID;
    // const {message_id} = req.body;
    const text = req.body.text_message_content;
    const messageType = req.body.message_type;
    const sender = req.body.from;
    const receiver = req.body.to;
    const time = Date.now().toString();


    const newRoom = new Room({
      roomNum: roomID, 
      userList: [sender,receiver],
      messageList: []
    })
    
    if (messageType === 'text') {
        const newTextMessage = new Message ({
            // message_id,
            message_type: messageType,
            timeStamp : time,
            text_message_content: text,
            from: sender,
            to: receiver,
        });
        
        newTextMessage.save()
        .then((message) => {
            // const messageId = message.message_id;
          console.log(message);
          Room.findOneAndUpdate(
            { _id: ObjectId(roomID)}, // just get id for room schema
            { $push: { messageList: ObjectId(message._id) }}
          )
            .then(() => {
              res.sendStatus(201);
            })
            .catch((err) => sendDatabaseErrorResponse(err, res));
        })
        .catch((err) => console.log(err));

        //
    //    try{
    //       User.findOneAndUpdate(
    //           {username:sender},
    //           {$push:{}}, // how to update the message for the sender? 
    //       )
    //          .then(()=>{
    //              User.findOneAndUpdate(
    //                  {username: receiver},
    //                  {$push:{}}, // how to update the message for the receiver 
    //              )   
    //                 .then(()=>{
    //                     res.sendStatus(200);
    //                 })
    //                 .catch((err) => sendDatabaseErrorResponse(err, res));
    //          })
    //          .catch((err) => sendDatabaseErrorResponse(err, res));

    // //     }
    //     catch(err){
    //         res.status(559).json(`remote server error: ${err}`);
    //     }
          
   
        // send text message, create message object, add it to the room (room number, list of users, array of messages) 

    }
    else if(messageType === 'audio/mpeg'){
        // send audio message, blob (convert to binary, store to db)
    }
    
    else if (messageType === 'video/mp4' || messageType === 'video/mp3'){
        // send video message, blob 
    }
    else if (messageType === 'png' || messageType === 'jpg'){
        // send the image to 
        // image = Buffer.from(image, 'base64');
    }
    else {
        // message type is not correct
      res.status(422);
      res.json('For now only text message is allowed');
      return;
    }

    // try {
    //   if (file && !checkFileSize(file)) {
    //     res.status(413);
    //     res.json(`[!] Image is too large (max = ${maxFileKb}KB)`);
    //     return;
    //   }

    //   image = fs.readFileSync(file.path).toString('base64');
    //   fs.unlinkSync(file.path);
    // } catch (err) {
    //   res.status(551).json(`[!] Could not read image: ${err}`);
    //   return;
    // }

    
    // const datetime = Date.now().toString();

    // tags = tags.split(/[, ]+/);
    // const validatedTags = new Set();

    // User.find() 
    //   .then((userArray) => {
    //     const userSet = new Set();

    //     userArray.forEach((user) => {
    //       userSet.add(user.username);
    //     });

    //     tags.forEach((tag) => {
    //       if (userSet.has(tag)) {
    //         validatedTags.add(tag);
    //       }
    //     });

    //     const newPost = new Post({
    //       username,
    //       datetime,
    //       image,
    //       contentType,
    //       title,
    //       description,
    //       privacy,
    //       likes: [],
    //       tags: Array.from(validatedTags),
    //       comments: [],
    //     });

    //     newPost.save()
    //       .then((post) => {
    //         User.findOneAndUpdate(
    //           { username },
    //           { $push: { posts: { id: post._id, time: post.datetime } } },
    //         )
    //           .then(() => {
    //             res.sendStatus(201);
    //           })
    //           .catch((err) => sendDatabaseErrorResponse(err, res));
    //       })
    //       .catch((err) => sendDatabaseErrorResponse(err, res));
    //   });
  });
  module.exports = router;